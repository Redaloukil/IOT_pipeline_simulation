version: "3"

services:
  nodejs:
    build:
      context: .
      dockerfile: Dockerfile
    image: nodejs
    container_name: nodejs
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
      - MONGO_HOSTNAME=db
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB=$MONGO_DB
      - PORT=$PORT
    ports:
      - "80:8080"
    volumes:
      - .:/home/node/app
      - node_modules:/home/node/app/node_modules
    networks:
      - app-network
    command: ./wait_for.sh db:27017 -- ./wait_for.sh message_queue:5672 -- /home/node/app/node_modules/.bin/nodemon app.js
    depends_on:
      - db
      - message_queue
    links:
      - message_queue

  db:
    image: ${IMAGE_NAME}
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    volumes:
      - dbdata:/data/db
    networks:
      - app-network
    hostname: db

  angular-ui:
    build:
      context: ../frontend/simulator
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    container_name: angular-ui
    networks:
      - app-network
    volumes:
      - ../frontend/simulator:/usr/src/app/simulator
      - ../frontend/simulator/node_modules:/usr/src/app/simulator/node_modules

  message_queue:
    image: rabbitmq:3-management
    container_name: message_queue
    restart: unless-stopped
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./data:/var/lib/rabbitmq
      - ./data/logs:/var/log/rabbitmq
    networks:
      - app-network
    hostname: message_queue

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
  node_modules:
